# --- Stage 1: Build Agda using cabal v1-install with a custom prefix ---
FROM haskell:latest AS builder

# Install required tools for building Agda
RUN apt-get update && apt-get install -y alex happy

WORKDIR /build

# Use the legacy v1-install (which supports --prefix) to install Agda
RUN cabal update && \
    cabal install Agda --installdir=/opt/agda/bin --install-method=copy

# Copy the share folder (including share/lib)
RUN cp -r /root/.local/state/cabal/store/ghc-9.10.1-37dd/Agda-2.7.0.1-c720c3eb0219ede07126f0185a890947bb7a5bc034664669b19db1806574b4cb/share/ /opt/agda/share

# Verify (optional): List /opt/agda to check that the share directory exists
RUN ls -R /opt/agda
    
# --- Stage 2: Final AWS Lambdaâ€“compatible image ---
FROM public.ecr.aws/lambda/python:3.12

# Copy Python dependencies and function code
COPY requirements.txt ${LAMBDA_TASK_ROOT}
RUN pip install -r requirements.txt

COPY lambda_function.py ${LAMBDA_TASK_ROOT}
COPY ex.agda ${LAMBDA_TASK_ROOT}

# Copy the complete Agda installation from the builder stage.
COPY --from=builder /opt/agda /opt/agda

# Set environment variables:
# 1. Add /opt/agda/bin to the PATH so that the Agda binary is found.
# 2. (Optionally) set Agda_datadir to override Agda's lookup if needed.
ENV PATH="/opt/agda/bin:${PATH}"
ENV Agda_datadir="/opt/agda/share"

# Set the CMD to your Lambda handler.
CMD [ "lambda_function.handler" ]
    